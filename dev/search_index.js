var documenterSearchIndex = {"docs":
[{"location":"book/structure/#Structure-of-Arabic-Grammar","page":"Structure of Arabic Grammar","title":"Structure of Arabic Grammar","text":"","category":"section"},{"location":"book/structure/#Grammar","page":"Structure of Arabic Grammar","title":"Grammar","text":"","category":"section"},{"location":"book/structure/#Part-of-Speech","page":"Structure of Arabic Grammar","title":"Part of Speech","text":"","category":"section"},{"location":"man/qurantree/#Working-with-QuranTree.jl","page":"Working with QuranTree.jl","title":"Working with QuranTree.jl","text":"","category":"section"},{"location":"man/qurantree/","page":"Working with QuranTree.jl","title":"Working with QuranTree.jl","text":"Yunir.jl can seemlessly work with QuranTree.jl.","category":"page"},{"location":"man/qurantree/","page":"Working with QuranTree.jl","title":"Working with QuranTree.jl","text":"using Pkg\nPkg.add(\"QuranTree\")","category":"page"},{"location":"man/qurantree/","page":"Working with QuranTree.jl","title":"Working with QuranTree.jl","text":"using Yunir\nusing QuranTree\n\ndata = QuranData();\ncrps, tnzl = load(data);\ncrpsdata = table(crps)\ntnzldata = table(tnzl)\narabic(verses(crpsdata[114])[1])","category":"page"},{"location":"man/qurantree/","page":"Working with QuranTree.jl","title":"Working with QuranTree.jl","text":"note: Note\nYou have to install QuranTree.jl to run the above example. To install, runusing Pkg\nPkg.add(\"QuranTree\")","category":"page"},{"location":"man/qurantree/#Normalization","page":"Working with QuranTree.jl","title":"Normalization","text":"","category":"section"},{"location":"man/qurantree/","page":"Working with QuranTree.jl","title":"Working with QuranTree.jl","text":"ikhlas = crpsdata[114]\nikhlas_vrs = verses(ikhlas)\nikhlas_nrm = normalize.(ikhlas_vrs)\narabic.(ikhlas_nrm)","category":"page"},{"location":"man/qurantree/#Dediacritization","page":"Working with QuranTree.jl","title":"Dediacritization","text":"","category":"section"},{"location":"man/qurantree/","page":"Working with QuranTree.jl","title":"Working with QuranTree.jl","text":"ikhlas_ddc = dediac.(ikhlas_vrs)\narabic.(ikhlas_ddc)","category":"page"},{"location":"man/qurantree/#Transliteration","page":"Working with QuranTree.jl","title":"Transliteration","text":"","category":"section"},{"location":"man/qurantree/","page":"Working with QuranTree.jl","title":"Working with QuranTree.jl","text":"ar_ikhlas = verses(tnzldata[114])\nencode.(ar_ikhlas)","category":"page"},{"location":"man/text_alignment/#Text-Alignment","page":"Text Alignment","title":"Text Alignment","text":"","category":"section"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Text alignment is used for pairwise comparison of texts (e.g. books), with the aim of checking for deletions, insertions, matches and mismatches in the target texts relative to a reference texts. This is the same task as sequence alignment of two DNA sequence as in Biology. Indeed, Yunir.jl supports this by extending the BioAlignments.jl APIs  to sequence of Arabic texts. Yunir.jl uses align function for aligning two texts.","category":"page"},{"location":"man/text_alignment/#How-it-works","page":"Text Alignment","title":"How it works","text":"","category":"section"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"The way it works is that, BioAlignments.jl requires a Roman characters as input for pairwise alignment. Therefore, any Arabic characters must first be transliterated to Roman characters. This is possible using Yunir.jl's encode function. The resulting alignment, which is in Roman characters, is then transliterated back to Arabic for easy interpretation.","category":"page"},{"location":"man/text_alignment/#KITAB-project's-text-reuse","page":"Text Alignment","title":"KITAB project's text reuse","text":"","category":"section"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"We will consider a simple example based on \"text reuse\" case study of KITAB project. The following are portions of two books with IDs Shamela0012129-ara1 and Shamela0023790-ara1. The goal is to compare the two by aligning the characters, and see the similarity based on matches, mismatches, deletions and insertions of characters.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"<table>\n    <thead>\n        <th>Shamela0012129-ara1</th>\n        <th>Shamela0023790-ara1</th>\n    </thead>\n    <tbody>\n        <tr>\n            <td>خرج مع ابي بكر الصديق رضي الله عنه في تجارة الي بصري ومعهم نعيمان وكان نعيمان ممن شهد——- بدرا ايضا وك——-ان علي الزاد فقال له سويبط———– اطعمني فقال حتي يجء ابو بكر فقال اما والله لاغيظنك فمروا بقوم فقال لهم سويبط -تشترون مني عبدا قا—لوا نعم فقال انه عبد له كلام وهو قاءل لكم اني حر فان كنتم اذا قال لكم هذه المقالة تركتموه فلا تفسدوا علي عبدي قا-لوا بل نشتريه منك فاشتروه بعشر قلاءص ثم جاءوا فوضعوا في عنقه حبلا ف—————قال نعيمان ان هذا يستهزء بكم واني حر فقالوا قد عرفنا –خبرك وانطلقوا به فلما جاء ابو بكر -اخبروه فاتبعهم ورد عليهم القلاءص واخذه فلما قدموا علي النبي صلي الله عليه وسلم اخبروه فضحك هو واصحابه من ذلك حولا</td>\n            <td>خرج— ابو بكر——————– في تجارة——— ومعه- نعيمان وسويبط بن حرملة وكانا شهدا بدر—–ا وكان نعيمان علي الزاد فقال له سويبط وكان مزاحا اطعمني فقال حتي يجء ابو بكر فقال اما والله لاغيظنك فمروا بقوم فقال لهم سويبط اتشترون مني عبدا لي قالوا نعم ق-ال انه عبد له كلام وهو قاءل لكم اني حر فان كنتم اذا قال لكم هذه المقالة تركتموه فلا تفسدوا علي عبدي فقالوا بل نشتريه منك——– بعشر قلاءص ثم جاءوا فوضعوا في عنقه حبلا وعمامة واشتروه فقال نعيمان ان هذا يستهزء بكم واني حر قا-لوا قد اخبرنا بخبرك وانطلقوا به و—-جاء ابو بكر فاخبروه فاتبعهم فرد عليهم القلاءص واخذه فلما قدموا علي النبي صلي الله عليه وسلم اخبروه فضحك هو واصحابه منهما- حول</td>\n        </tr>\n    </tbody>\n</table>","category":"page"},{"location":"man/text_alignment/#Data-processing","page":"Text Alignment","title":"Data processing","text":"","category":"section"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"To have a quality output, we will need to process the texts to remove unnecessary noise. First, we need to remove all non-Arabic characters. The following will input the two candidate books:","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"using Yunir\n\nshamela0012129 = \"خرج مع ابي بكر الصديق رضي الله عنه في تجارة الي بصري ومعهم نعيمان وكان نعيمان ممن شهد——- بدرا ايضا وك——-ان علي الزاد فقال له سويبط———– اطعمني فقال حتي يجء ابو بكر فقال اما والله لاغيظنك فمروا بقوم فقال لهم سويبط -تشترون مني عبدا قا—لوا نعم فقال انه عبد له كلام وهو قاءل لكم اني حر فان كنتم اذا قال لكم هذه المقالة تركتموه فلا تفسدوا علي عبدي قا-لوا بل نشتريه منك فاشتروه بعشر قلاءص ثم جاءوا فوضعوا في عنقه حبلا ف—————قال نعيمان ان هذا يستهزء بكم واني حر فقالوا قد عرفنا –خبرك وانطلقوا به فلما جاء ابو بكر -اخبروه فاتبعهم ورد عليهم القلاءص واخذه فلما قدموا علي النبي صلي الله عليه وسلم اخبروه فضحك هو واصحابه من ذلك حولا\";\nshamela0023790 = \"خرج— ابو بكر——————– في تجارة——— ومعه- نعيمان وسويبط بن حرملة وكانا شهدا بدر—–ا وكان نعيمان علي الزاد فقال له سويبط وكان مزاحا اطعمني فقال حتي يجء ابو بكر فقال اما والله لاغيظنك فمروا بقوم فقال لهم سويبط اتشترون مني عبدا لي قالوا نعم ق-ال انه عبد له كلام وهو قاءل لكم اني حر فان كنتم اذا قال لكم هذه المقالة تركتموه فلا تفسدوا علي عبدي فقالوا بل نشتريه منك——– بعشر قلاءص ثم جاءوا فوضعوا في عنقه حبلا وعمامة واشتروه فقال نعيمان ان هذا يستهزء بكم واني حر قا-لوا قد اخبرنا بخبرك وانطلقوا به و—-جاء ابو بكر فاخبروه فاتبعهم فرد عليهم القلاءص واخذه فلما قدموا علي النبي صلي الله عليه وسلم اخبروه فضحك هو واصحابه منهما- حول\";","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Next, we remove the non-Arabic characters like the dashes using the clean function:","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"shamela0012129_cln = clean(shamela0012129)\nshamela0023790_cln = clean(shamela0023790)","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"tips: Tips\nThe clean function removes the non-Arabic characters through regex, which is set at the third argument of the function. That is, clean(shamela0012129) is actually equivalent to:clean(shamela0012129; replace_non_ar=\"\", target_regex=r\"[A-Za-z0-9\\(:×\\|\\–\\[\\«\\»\\]~\\)_@./#&+\\—-]*\")In case there are still non-Arabic characters not captured using the default regex, simply insert it to the default pattern.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"warning: Caution\nIt is important that all non-Arabic characters be removed since any special character might be transliterated to a particular Arabic character once transliterating the output back to Arabic, and the result might mislead. See the section \"How it works\" above.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Next, we need to expand the special Arabic characters such as Allah, الله, since some text editors combines this into the unicode U+FDF2. This is also true with Lam-Alif, ﻻ, U+FEFB. We will add space between these letters to display the alignment of the characters properly, with a caveat that it should be understood that these characters are connected when encountering their sequence in the output. So that, \"الله\" becomes \"ا ل ل ه\" and \"ﻻ\" becomes \"ل ا\" in the output. The function to use is expand_archars.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"shamela0012129_exp = expand_archars(shamela0012129_cln)\nshamela0023790_exp = expand_archars(shamela0023790_cln)","category":"page"},{"location":"man/text_alignment/#Encoding","page":"Text Alignment","title":"Encoding","text":"","category":"section"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"As emphasized above, Yunir.jl is based on BioAlignments.jl APIs to do the pairwise alignment. To do this, BioAlignments.jl requires  a Roman character input. Therefore, the input Arabic texts need to be encoded or transliterated to Roman characters.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"shamela0012129_enc = encode(shamela0012129_exp)\nshamela0023790_enc = encode(shamela0023790_exp)","category":"page"},{"location":"man/text_alignment/#Alignment","page":"Text Alignment","title":"Alignment","text":"","category":"section"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Finally, we can do the alignment as follows:","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"res = align(shamela0012129_enc, shamela0023790_enc);\nres","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Unfortunately, many software and text editors including the Julia REPL  have default left-to-right printing, and hence the alignment above is not clear. What you can do is to copy the output above and paste it into a text editor with Arabic Monospace font (e.g. Kawkab font), and set it to right-justified. Here is the result under macOS's Text Editor (after setting the page to right-justified):","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"(Image: Alignment-Output-in-Text-Editor)","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"The result of the alignment is a list of groups of reference text indicated by the Arabic  character ١, and the target texts indicated by the Arabic character ٢. If the characters of reference and target match, a Alif (i.e., ا) between their rows is placed. Further, if a tatweel (i.e., \"ـ\") is present in the target text, it means those tatweels represent the deletion of characters from the reference text. On the other hand, if a tatweel is present in the reference text, it means an insertion of characters was done in the target text. Lastly, if both characters of target and reference texts do not match, a space is inserted between their rows.","category":"page"},{"location":"man/text_alignment/#Alignment-in-Buckwalter","page":"Text Alignment","title":"Alignment in Buckwalter","text":"","category":"section"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"We can actually extract the encoded version, which is in Buckwalter transliteration mapping. This can be accessed via the .alignment property of the res above. That is,","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"res.alignment","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"This is the same with the result above, but this one is the Buckwalter encoded Arabic input.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"The number in the left side is the index of the first character in the row, whereas the number in the right side is the index of the last character in the row.","category":"page"},{"location":"man/text_alignment/#Alignment-statistics","page":"Text Alignment","title":"Alignment statistics","text":"","category":"section"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"From the results above, we can extract the score of alignment which is a  distance measure between the reference and the target texts. The lower the score the similar the two texts therefore.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"score(res)","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Other statistics are as follows","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"count_matches(res)\ncount_mismatches(res)\ncount_insertions(res)\ncount_deletions(res)\ncount_aligned(res)","category":"page"},{"location":"man/text_alignment/#Multiple-Alignments","page":"Text Alignment","title":"Multiple Alignments","text":"","category":"section"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"At times, especially when working with books, the input texts are long enough that it becomes computationally expensive to do the alignment directly. A simple solution is to partition the input  texts into parts and do the alignment, pairing the texts by permutation. For example, in the KITAB's text reuse use case the books are partition into \"milestone\" which is indicated by a prefix ms in the texts. To mimick this, we'll add ms into the  shamela0012129 and shamela0023790 as follows:","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"shamela0012129 = \"خرج مع ابي بكر الصديق رضي الله عنه في تجارة الي بصري ومعهم نعيمان وكان نعيمان ممن شهد——- بدرا ايضا وك——-ان علي الزاد فقال له سويبط———– اطعمني فقال حتي يجء ابو بكر فقال اما والله لاغيظنك فمروا بقوم فقال لهم سويبط -تشترون مني عبدا قا—لوا نعم فقال انه عبد له كلام وهو قاءل لكم اني حر فان كنتم اذا قال لكم هذهmsتركتموه فلا تفسدوا علي عبدي قا-لوا بل نشتريه منك فاشتروه بعشر قلاءص ثم جاءوا فوضعوا في عنقه حبلا ف—————قال نعيمان ان هذا يستهزء بكم واني حر فقالوا قد عرفنا –خبرك وانطلقوا به فلما جاء ابو بكر -اخبروه فاتبعهم ورد عليهم القلاءص واخذه فلما قدموا علي النبي صلي الله عليه وسلم اخبروه فضحك هو واصحابه من ذلك حولا\";\nshamela0023790 = \"خرج— ابو بكر——————– في تجارة——— ومعه- نعيمان وسويبط بن حرملة وكانا شهدا بدر—–ا وكان نعيمان علي الزاد فقال له سويبط وكان مزاحا اطعمني فقال حتي يجء ابو بكر فقال اما والله لاغيظنك فمروا بقوم فقال لهم سويبط اتشترون مني عبدا لي قالوا نعم ق-ال انه عبد له كلام وهو قاءل لكم اني حر فان كنتم اذا قال لكم هذه المقالة تركتموهmsفلا تفسدوا علي عبدي فقالوا بل نشتريه منك——– بعشر قلاءص ثم جاءوا فوضعوا في عنقه حبلا وعمامة واشتروه فقال نعيمان ان هذا يستهزء بكم واني حر قا-لوا قد اخبرنا بخبرك وانطلقوا به و—-جاء ابو بكر فاخبروه فاتبعهم فرد عليهم القلاءص واخذه فلما قدموا علي النبي صلي الله عليه وسلم اخبروه فضحك هو واصحابه منهما- حول\";","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"We will then split this into milestones,","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"shamela0012129 = string.(split(shamela0012129, \"ms\"))\nshamela0023790 = string.(split(shamela0023790, \"ms\"))","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Then as before, we clean the splitted texts:","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"shamela0012129_cln = clean.(shamela0012129)\nshamela0023790_cln = clean.(shamela0023790)","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"note: Note\nIn Julia, we suffix the name of the function with . to broadcast the function to each item of the list. In this case, we clean each splitted texts.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Next, we expand the characters as before:","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"shamela0012129_exp = expand_archars.(shamela0012129_cln)\nshamela0023790_exp = expand_archars.(shamela0023790_cln)","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"And we encode them as follows","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"shamela0012129_enc = encode.(shamela0012129_exp)\nshamela0023790_enc = encode.(shamela0023790_exp)","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Finally, we run the alignment.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"res, scr = align(shamela0012129_enc, shamela0023790_enc);","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Note that if the input texts are Array or Matrix the align function returns a tuple, comprising of the result of the alignment in Matrix, and the corresponding scores in Matrix.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Here is the score of the comparison, where the rows correspond to the index of the partitions of the reference text, and the  columns correspond to the index of the partitions of the target text.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"scr","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"The corresponding result of the score is also a Matrix, but it is huge since each cell of the matrix correspond to the result of the alignment and printing it would be difficult to understand. It is therefore better to simply index the Matrix to view only part of it.","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"For example, the corresponding result of the score in the first row first column is given below","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"res[1,1] # result of the score scr[1,1]","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"For the result of the score in the second row first column, we have","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"res[2,1] # result of the score scr[2,1]","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"Finally, as before we can extract the statistics for each result:","category":"page"},{"location":"man/text_alignment/","page":"Text Alignment","title":"Text Alignment","text":"count_matches(res[2,1])\ncount_mismatches(res[2,1])\ncount_insertions(res[2,1])\ncount_deletions(res[2,1])\ncount_aligned(res[2,1])","category":"page"},{"location":"man/orthography/#Orthographical-Analysis","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"","category":"section"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"All Arabic characters and diacritics and other characters used in Arabic texts, such as the Qur'an are all encoded as structs or types. These types have properties that can be used for orthographical analysis. These properties are the vocal and numeral associated with each of the character.","category":"page"},{"location":"man/orthography/#Numerals","page":"Orthographical Analysis","title":"Numerals","text":"","category":"section"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"The numerals we refer here is the Abjad numeral.","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"using Yunir\n\nar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\";","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"If we want to take the numerals, we need to tokenize it first.","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"arb_token = tokenize(ar_basmala)","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"Next we then parse each of these words as   Orthography.","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"arb_parsed1 = parse(Orthography, arb_token[1])\narb_parsed2 = parse.(Orthography, arb_token)","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"Finally, we can compute the numerals of the parsed tokens as follows:","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"numerals(arb_parsed2[1])\nnumerals(arb_parsed2[2])\nnumerals(arb_parsed2[3])","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"We can also check the type of the characters, whether it is a Lunar or Solar character. To do this, use the isfeat (short for 'is feature' in the sense that characters here are also referred as feature).","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"isfeat(arb_parsed2[1], AbstractLunar)\narb_parsed2[1][isfeat(arb_parsed2[1], AbstractLunar)]\nisfeat.(arb_parsed2, AbstractLunar)\nisfeat.(arb_parsed2, AbstractSolar)","category":"page"},{"location":"man/orthography/#Vocals","page":"Orthographical Analysis","title":"Vocals","text":"","category":"section"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"Vocals refer to categorization of the characters based on the vocals it mainly uses in pronunciation.","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"vocals(arb_parsed2[1])\nvocals(arb_parsed2[2])\nvocals(arb_parsed2[3])","category":"page"},{"location":"man/orthography/#Simple-Encoding","page":"Orthographical Analysis","title":"Simple Encoding","text":"","category":"section"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"Simple encoding is a worded or spelled out transliteration of the arabic text.","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"parse(SimpleEncoding, ar_basmala)","category":"page"},{"location":"book/introduction/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"book/introduction/#What-to-expect?","page":"Introduction","title":"What to expect?","text":"","category":"section"},{"location":"book/introduction/#Content","page":"Introduction","title":"Content","text":"","category":"section"},{"location":"man/basic_utilities/#Basic-Utilities","page":"Basic Utilities","title":"Basic Utilities","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"In this section, we are going to discuss how to use the APIs for dediacritization, normalization and transliteration.","category":"page"},{"location":"man/basic_utilities/#Dediacritization","page":"Basic Utilities","title":"Dediacritization","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"The function to use is dediac, which works on Arabic, Buckwalter and custom transliterated characters.","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"using Yunir\n\nar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\";\ndediac(ar_basmala)","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Or using Buckwalter as follows:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"bw_basmala = \"bisomi {ll~ahi {lr~aHoma`ni {lr~aHiymi\";\ndediac(bw_basmala)","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"With Julia's broadcasting feature, the above dediacritization can be applied to arrays by simply adding . to the name of the function.","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"sentence0 = [\"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\",\n    \"إِيَّاكَ نَعْبُدُ وَإِيَّاكَ نَسْتَعِينُ\"\n]\ndediac.(sentence0)","category":"page"},{"location":"man/basic_utilities/#Normalization","page":"Basic Utilities","title":"Normalization","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"The function to use is normalize, which works on Arabic, Buckwalter and custom transliterated characters. For example, using the ar_basmala and bw_basmala defined above, the normalized version would be","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"normalize(ar_basmala)\nnormalize(bw_basmala)","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"You can also normalize specific characters, for example:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"normalize(ar_basmala, :alif_khanjareeya)\nnormalize(ar_basmala, :hamzat_wasl)\nsentence1 = \"وَٱلَّذِينَ يُؤْمِنُونَ بِمَآ أُنزِلَ إِلَيْكَ وَمَآ أُنزِلَ مِن قَبْلِكَ وَبِٱلْءَاخِرَةِ هُمْ يُوقِنُونَ\";\nnormalize(sentence1, :alif_maddah)\nnormalize(sentence1, :alif_hamza_above)\nsentence2 = \"إِيَّاكَ نَعْبُدُ وَإِيَّاكَ نَسْتَعِينُ\";\nnormalize(sentence2, :alif_hamza_below)\nsentence3 = \"ٱلَّذِينَ يُؤْمِنُونَ بِٱلْغَيْبِ وَيُقِيمُونَ ٱلصَّلَوٰةَ وَمِمَّا رَزَقْنَٰهُمْ يُنفِقُونَ\";\nnormalize(sentence3, :waw_hamza_above)\nnormalize(sentence3, :ta_marbuta)\nsentence4 = \"ٱللَّهُ يَسْتَهْزِئُ بِهِمْ وَيَمُدُّهُمْ فِى طُغْيَٰنِهِمْ يَعْمَهُونَ\";\nnormalize(sentence4, :ya_hamza_above)\nsentence5 = \"ذَٰلِكَ ٱلْكِتَٰبُ لَا رَيْبَ فِيهِ هُدًى لِّلْمُتَّقِينَ\";\nnormalize(sentence5, :alif_maksura)\nsentence6 = \"ﷺ\"\nnormalize(sentence6) === \"صلى الله عليه وسلم\"\nsentence7 = \"ﷻ\"\nnormalize(sentence7) === \"جل جلاله\"\nsentence8 = \"﷽\"\nnormalize(sentence8) === ar_basmala","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Or a combination,","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"normalize(ar_basmala, [:alif_khanjareeya, :hamzat_wasl])","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Broadcasting also applies to normalize function.","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"normalize.(sentence0)\nnormalize.(sentence0, [:alif_khanjareeya, :alif_hamza_below])","category":"page"},{"location":"man/basic_utilities/#Transliteration","page":"Basic Utilities","title":"Transliteration","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"By default, Yunir.jl uses extended Buckwalter transliteration. The function to use are encode (Arabic -> Roman) and arabic (Roman -> Arabic). The following are some examples:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"arabic(bw_basmala)\narabic(bw_basmala) === ar_basmala\nencode(ar_basmala)\nencode(ar_basmala) === bw_basmala","category":"page"},{"location":"man/basic_utilities/#Custom-Transliteration","page":"Basic Utilities","title":"Custom Transliteration","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"For custom transliteration, user must specify the character mapping in a dictionary with Symbol type for both keys and values. By default, the Buckwalter mapping used in Yunir.jl is encoded in the constant variable BW_ENCODING.","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"BW_ENCODING","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Suppose we want to create a custom transliteration by simply reversing the values of the dictionary, then we have the following:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"old_keys = collect(keys(BW_ENCODING));\nnew_vals = reverse(collect(values(BW_ENCODING)));","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"The new dictionary would be:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"my_encoder = Dict(old_keys .=> new_vals)","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Next is to declare this new transliteration so functions for dediacritization and normalization can use the new mapping. This is done using the macro @transliterator, which takes two arguments: the dictionary and the type name of the mapping.","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"@transliterator my_encoder \"MyEncoder\"","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Using this new transliteration, we now have an updated mapping for the basmala above:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"encode(ar_basmala)","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Reversing this two Arabic characters should give us the appropriate decoding:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"arabic(encode(ar_basmala))","category":"page"},{"location":"man/basic_utilities/#Dediacritization-and-Normalization-on-Custom-Transliteration","page":"Basic Utilities","title":"Dediacritization and Normalization on Custom Transliteration","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"As mentioned above, dediacritization and normalization also works on new custom transliteration. For example, dediacritizing the encoded ar_basmala would give us:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"dediac(encode(ar_basmala))\n\ndediac(encode(ar_basmala)) |> arabic","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"And for normalization, ","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"normalize(encode(ar_basmala))\n\nnormalize(encode(ar_basmala)) |> arabic","category":"page"},{"location":"man/basic_utilities/#Reset-Transliteration","page":"Basic Utilities","title":"Reset Transliteration","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"To reset the transliteration back to Buckwalter, simply specify :default as the argument for the macro @transliterator as follows:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"@transliterator :default","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"With this, all functions dependent on transliteration will also get updated.","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"encode(ar_basmala)\nencode(ar_basmala) === bw_basmala\ndediac(encode(ar_basmala))\nnormalize(encode(ar_basmala))","category":"page"},{"location":"#Welcome-to-Yunir.jl-Documentation","page":"Home","title":"Welcome to Yunir.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: codecov) (Image: MIT License) (Image: DOI)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Yunir.jl is a lightweight toolkit for Arabic Natural Language Processing (ANLP). It offers APIs for the building blocks of ANLP specifically dediacritization, normalization, transliteration (including custom transliteration), simple encoding, and orthographical analysis.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Yunir (ينير) /yunīr/ is the Arabic word for \"illuminate.\" The logo is a Kufic calligraphy of the Arabic word نور /nūr/ or \"light,\" specifically, a heatless light such as that of the light of the moon.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the package, run the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"Yunir\")","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"@software{al_ahmadgaid_b_asaad_2022_6629868,\n  author       = {Al-Ahmadgaid B. Asaad},\n  title        = {{Yunir.jl: A lightweight Arabic NLP toolkit for \n                   Julia}},\n  month        = jun,\n  year         = 2022,\n  publisher    = {Zenodo},\n  version      = {v0.2.0},\n  doi          = {10.5281/zenodo.6629868},\n  url          = {https://doi.org/10.5281/zenodo.6629868}\n}","category":"page"},{"location":"#Outline","page":"Home","title":"Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"man/basic_utilities.md\",\n    \"man/orthography.md\",\n    \"man/qurantree.md\",\n    \"man/text_alignment.md\",\n    \"man/api.md\",\n]\nDepth = 2","category":"page"},{"location":"book/verb/#Verb","page":"Verb","title":"Verb","text":"","category":"section"},{"location":"book/verb/","page":"Verb","title":"Verb","text":"Arabic words are all based on a root triliteral verb, and rarely quadriliteral. From these root verbs form other words through addition of clitics.","category":"page"},{"location":"book/verb/#Verb-Forms","page":"Verb","title":"Verb Forms","text":"","category":"section"},{"location":"book/verb/","page":"Verb","title":"Verb","text":"There are 15 verb forms in total, but the last 3 rarely occurs. Consider for example the word فَعَلَ (to kill), the different forms are as follows:","category":"page"},{"location":"man/api/#API-References","page":"API","title":"API References","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"Modules = [Yunir]","category":"page"},{"location":"man/api/#Yunir.align-Tuple{Array{String}, Array{String}}","page":"API","title":"Yunir.align","text":"align(src::Array{String}, tgt::Array{String}; \n\tcostmodel::CostModel=CostModel(match=0, mismatch=1, insertion=1, deletion=0),\n\tstore_results::Bool=true\n)\n\nALign tgt array of texts to src array of texts using a particular costmodel from BioAlignments.jl. store_results if results of alignment are stored or returned,  otherwise, only the scores are returned.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.align-Tuple{String, String}","page":"API","title":"Yunir.align","text":"align(src::String, tgt::String; costmodel::BioAlignments.CostModel=BioAlignments.CostModel(match=0, mismatch=1, insertion=1, deletion=0))\n\nAlign tgt string to src string using a particular costmodel from BioAlignments.jl.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.arabic-Tuple{String}","page":"API","title":"Yunir.arabic","text":"arabic(s::String[, encoder::AbstractEncoder])\n\nEncode the String object into Arabic characters. Custom encoder generated from @transliterator can be provided, but default is Buckwalter.\n\nExamples\n\njulia> bw_basmala = \"bisomi {ll~ahi {lr~aHoma`ni {lr~aHiymi\"\njulia> arabic(bw_basmala)\n\"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.clean","page":"API","title":"Yunir.clean","text":"clean(s::String, replace_non_ar::String, target_regex::Regex)\n\nClean the input text by replacing all non-Arabic texts with a string input.\n\n\n\n\n\n","category":"function"},{"location":"man/api/#Yunir.dediac-Tuple{String}","page":"API","title":"Yunir.dediac","text":"dediac(s::String)\n\nDediacritize the input String object.\n\nExamples\n\njulia> bw_basmala = \"bisomi {ll~ahi {lr~aHoma`ni {lr~aHiymi\"\njulia> dediac(bw_basmala)\n\"bsm {llh {lrHmn {lrHym\"\njulia> dediac(arabic(bw_basmala))\n\"بسم ٱلله ٱلرحمن ٱلرحيم\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.encode-Tuple{String}","page":"API","title":"Yunir.encode","text":"encode(s::String)\n\nTransliterate the input String object using Buckwalter.\n\nExamples\n\njulia> ar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\"\njulia> encode(ar_basmala)\n\"bisomi {ll~ahi {lr~aHoma`ni {lr~aHiymi\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.encode-Tuple{Union{Char, String}, AbstractEncoder}","page":"API","title":"Yunir.encode","text":"encode(s::Union{Char,String}, encoder::AbstractEncoder)\n\nTransliterate the input String object using a custom encoder. Custom encoder is generated using the @transliterator.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.isfeat-Tuple{Orthography, Type{<:AbstractConsonant}}","page":"API","title":"Yunir.isfeat","text":"isfeat(x::Orthography, y::Type{<:AbstractConsonant})\n\nchecks if x is a y feature.\n\njulia> ar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\";\njulia> arb_token = tokenize(ar_basmala)\n4-element Vector{String}:\n \"بِسْمِ\"\n \"ٱللَّهِ\"\n \"ٱلرَّحْمَٰنِ\"\n \"ٱلرَّحِيمِ\"\njulia> arb_parsed2 = parse.(Orthography, arb_token)\n4-element Vector{Orthography}:\n Orthography(Type[Ba, Kasra, Seen, Sukun, Meem, Kasra])\n Orthography(Type[AlifHamzatWasl, Lam, Lam, Shadda, Fatha, Ha, Kasra])\n Orthography(Type[AlifHamzatWasl, Lam, Ra, Shadda, Fatha, HHa, Sukun, Meem, Fatha, AlifKhanjareeya, Noon, Kasra])\n Orthography(Type[AlifHamzatWasl, Lam, Ra, Shadda, Fatha, HHa, Kasra, Ya, Meem, Kasra])\njulia> isfeat(arb_parsed2[1], AbstractLunar)\n6-element BitVector:\n 1\n 0\n 0\n 0\n 1\n 0\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.normalize-Tuple{String, Symbol}","page":"API","title":"Yunir.normalize","text":"normalize(s::String, char::Symbol)\n\nNormalize a specific Arabic or Buckwalter String character (chars).\n\nExamples\n\njulia> ar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\"\njulia> normalize(ar_basmala, :alif_khanjareeya) === \"بِسْمِ ٱللَّهِ ٱلرَّحْمَانِ ٱلرَّحِيمِ\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.normalize-Tuple{String, Vector{Symbol}}","page":"API","title":"Yunir.normalize","text":"normalize(s::String, chars::Array{Symbol,1})\n\nNormalize a specific Arabic or Buckwalter String character/s (chars).\n\nExamples\n\njulia> ar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\"\njulia> normalize(ar_basmala, [:alif_khanjareeya, :hamzat_wasl]) === \"بِسْمِ اللَّهِ الرَّحْمَانِ الرَّحِيمِ\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.normalize-Tuple{String}","page":"API","title":"Yunir.normalize","text":"normalize(s::String)\n\nNormalize a Arabic or Buckwalter String characters.\n\nExamples\n\njulia> normalize(\"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\")\n\"بِسْمِ اللَّهِ الرَّحْمَانِ الرَّحِيمِ\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.tokenize","page":"API","title":"Yunir.tokenize","text":"tokenize(s::String)\n\ntokenizes the string input s by space, and also tokenizes the punctuations.\n\njulia> ar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\"\njulia> tokenize(ar_basmala)\n4-element Vector{String}:\n \"بِسْمِ\"\n \"ٱللَّهِ\"\n \"ٱلرَّحْمَٰنِ\"\n \"ٱلرَّحِيمِ\"\n\n\n\n\n\n","category":"function"},{"location":"man/api/#Yunir.@transliterator-Tuple{Any, Any}","page":"API","title":"Yunir.@transliterator","text":"@transliterator(dict, name)\n\nCreate a custom transliterator using an input dict (Dict object) with its corresponding name as String object. This will automatically update the transliterator inside all  functions like arabic, verses, and encode.\n\nExamples\n\njulia> my_encoder = Dict(\n    Symbol(Char(0x0621)) => Symbol('('),\n    Symbol(Char(0x0622)) => Symbol('''),\n    Symbol(Char(0x0623)) => Symbol('&'),\n    Symbol(Char(0x0624)) => Symbol('>'),\n    Symbol(Char(0x0625)) => Symbol('}'),\n    Symbol(Char(0x0626)) => Symbol('<'),\n    Symbol(Char(0x0627)) => Symbol('b'),\n    Symbol(Char(0x0628)) => Symbol('A'),\n    Symbol(Char(0x0629)) => Symbol('t'),\n    Symbol(Char(0x062A)) => Symbol('p'),\n    Symbol(Char(0x062B)) => Symbol('j'),\n    Symbol(Char(0x062C)) => Symbol('v'),\n    Symbol(Char(0x062D)) => Symbol('x'),\n    Symbol(Char(0x062E)) => Symbol('H'),\n    Symbol(Char(0x062F)) => Symbol('*'),\n    Symbol(Char(0x0630)) => Symbol('d'),\n    Symbol(Char(0x0631)) => Symbol('z'),\n    Symbol(Char(0x0632)) => Symbol('r'),\n    Symbol(Char(0x0633)) => Symbol('$'),\n    Symbol(Char(0x0634)) => Symbol('s'),\n    Symbol(Char(0x0635)) => Symbol('D'),\n    Symbol(Char(0x0636)) => Symbol('S'),\n    Symbol(Char(0x0637)) => Symbol('Z'),\n    Symbol(Char(0x0638)) => Symbol('T'),\n    Symbol(Char(0x0639)) => Symbol('g'),\n    Symbol(Char(0x063A)) => Symbol('E'),\n    Symbol(Char(0x0640)) => Symbol('f'),\n    Symbol(Char(0x0641)) => Symbol('_'),\n    Symbol(Char(0x0642)) => Symbol('k'),\n    Symbol(Char(0x0643)) => Symbol('q'),\n    Symbol(Char(0x0644)) => Symbol('m'),\n    Symbol(Char(0x0645)) => Symbol('l'),\n    Symbol(Char(0x0646)) => Symbol('h'),\n    Symbol(Char(0x0647)) => Symbol('n'),\n    Symbol(Char(0x0648)) => Symbol('Y'),\n    Symbol(Char(0x0649)) => Symbol('w'),\n    Symbol(Char(0x064A)) => Symbol('F'),\n    Symbol(Char(0x064B)) => Symbol('y'),\n    Symbol(Char(0x064C)) => Symbol('K'),\n    Symbol(Char(0x064D)) => Symbol('N'),\n    Symbol(Char(0x064E)) => Symbol('u'),\n    Symbol(Char(0x064F)) => Symbol('a'),\n    Symbol(Char(0x0650)) => Symbol('~'),\n    Symbol(Char(0x0651)) => Symbol('i'),\n    Symbol(Char(0x0652)) => Symbol('^'),\n    Symbol(Char(0x0653)) => Symbol('o'),\n    Symbol(Char(0x0654)) => Symbol('`'),\n    Symbol(Char(0x0670)) => Symbol('#'),\n    Symbol(Char(0x0671)) => Symbol(':'),\n    Symbol(Char(0x06DC)) => Symbol('{'),\n    Symbol(Char(0x06DF)) => Symbol('\"'),\n    Symbol(Char(0x06E0)) => Symbol('@'),\n    Symbol(Char(0x06E2)) => Symbol(';'),\n    Symbol(Char(0x06E3)) => Symbol('['),\n    Symbol(Char(0x06E5)) => Symbol('.'),\n    Symbol(Char(0x06E6)) => Symbol(','),\n    Symbol(Char(0x06E8)) => Symbol('-'),\n    Symbol(Char(0x06EA)) => Symbol('!'),\n    Symbol(Char(0x06EB)) => Symbol('%'),\n    Symbol(Char(0x06EC)) => Symbol('+'),\n    Symbol(Char(0x06ED)) => Symbol(']')\n);\njulia> @transliterator my_encoder \"MyEncoder\"\njulia> encode(ar_basmala)\n\"A~$^l~ :mmiun~ :mziux^lu#h~ :mziux~Fl~\"\n\n\n\n\n\n","category":"macro"},{"location":"man/api/#Yunir.@transliterator-Tuple{Any}","page":"API","title":"Yunir.@transliterator","text":"@transliterator(symbl)\n\nFallback to the default Buckwalter transliterator.\n\njulia> @transliterator :default\njulia> ar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\"\njulia> encode(ar_basmala)\n\"bisomi {ll~ahi {lr~aHoma`ni {lr~aHiymi\"\n\n\n\n\n\n","category":"macro"}]
}
